// MinIO Cloud Storage, (C) 2019 MinIO, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package crypto

import (
	"bytes"
	"crypto/tls"
	"errors"

	key "github.com/minio/keys"
	"github.com/minio/minio/cmd/config"
)

// KeysConfig contains the configuration required
// to initialize and connect to a keys server.
type KeysConfig struct {
	Enabled bool

	// The keys server endpoint.
	Endpoint string

	// The path to the TLS private key used
	// by MinIO to authenticate to the keys
	// server during the TLS handshake (mTLS).
	KeyFile string

	// The path to the TLS certificate used
	// by MinIO to authenticate to the keys
	// server during the TLS handshake (mTLS).
	//
	// The keys server will also allow or deny
	// access based on this certificate.
	// In particular, the keys server will
	// lookup the policy that corresponds to
	// the identity in this certificate.
	CertFile string

	// Path to a file or directory containing
	// the CA certificate(s) that issued / will
	// issue certificates for the keys server.
	//
	// This is required if the TLS certificate
	// of the keys server has not been issued
	// (e.g. b/c it's self-signed) by a CA that
	// MinIO trusts.
	CAPath string

	// The default key ID returned by KMS.KeyID().
	DefaultKeyID string
}

// Verify verifies if the keys configuration is correct
func (k KeysConfig) Verify() (err error) {
	switch {
	case k.Endpoint == "":
		err = errors.New("crypto: missing keys endpoint")
	case k.CertFile == "":
		err = errors.New("crypto: missing cert file")
	case k.KeyFile == "":
		err = errors.New("crypto: missing key file")
	case k.DefaultKeyID == "":
		err = errors.New("crypto: missing default key id")
	}

	return err
}

type keyService struct {
	client       *key.Client
	defaultKeyID string
}

// NewKeys returns a new keys KMS client. The returned KMS
// uses the X.509 certificate to authenticate itself to
// the keys server available at address.
//
// The defaultKeyID is the key ID returned when calling
// KMS.KeyID().
func NewKeys(kconfig KeysConfig) (KMS, error) {
	cert, err := tls.LoadX509KeyPair(kconfig.CertFile, kconfig.KeyFile)
	if err != nil {
		return nil, err
	}
	certPool, err := config.GetRootCAs(kconfig.CAPath)
	if err != nil {
		return nil, err
	}
	return &keyService{
		client: key.NewClient(kconfig.Endpoint, &tls.Config{
			Certificates: []tls.Certificate{cert},
			RootCAs:      certPool,
		}),
		defaultKeyID: kconfig.DefaultKeyID,
	}, nil
}

// KeyID returns the default key ID.
func (keys *keyService) KeyID() string {
	return keys.defaultKeyID
}

// GenerateKey returns a new plaintext key, generated by the KMS,
// and a sealed version of this plaintext key encrypted using the
// named key referenced by keyID. It also binds the generated key
// cryptographically to the provided context.
func (keys *keyService) GenerateKey(keyID string, ctx Context) (key [32]byte, sealedKey []byte, err error) {
	var context bytes.Buffer
	ctx.WriteTo(&context)

	var plainKey []byte
	plainKey, sealedKey, err = keys.client.GenerateDataKey(keyID, context.Bytes())
	if err != nil {
		return key, nil, err
	}
	if len(plainKey) != len(key) {
		return key, nil, errors.New("crypto: received invalid plaintext key size from KMS")
	}
	copy(key[:], plainKey)
	return key, sealedKey, nil
}

// UnsealKey returns the decrypted sealedKey as plaintext key.
// Therefore it sends the sealedKey to the KMS which decrypts
// it using the named key referenced by keyID and responses with
// the plaintext key.
//
// The context must be same context as the one provided while
// generating the plaintext key / sealedKey.
func (keys *keyService) UnsealKey(keyID string, sealedKey []byte, ctx Context) (key [32]byte, err error) {
	var context bytes.Buffer
	ctx.WriteTo(&context)

	var plainKey []byte
	plainKey, err = keys.client.DecryptDataKey(keyID, sealedKey, context.Bytes())
	if err != nil {
		return key, err
	}
	if len(plainKey) != len(key) {
		return key, errors.New("crypto: received invalid plaintext key size from KMS")
	}
	copy(key[:], plainKey)
	return key, nil
}

// UpdateKey re-wraps the sealedKey if the master key referenced by the keyID
// has been changed by the KMS operator - i.e. the master key has been rotated.
// If the master key hasn't changed since the sealedKey has been created / updated
// it may return the same sealedKey as rotatedKey.
//
// The context must be same context as the one provided while
// generating the plaintext key / sealedKey.
func (keys *keyService) UpdateKey(keyID string, sealedKey []byte, ctx Context) ([]byte, error) {
	// Currently a keys server does not support key rotation (of the same key)
	// Therefore, we simply return the same sealedKey.
	return sealedKey, nil
}
